name: üöÄ Build Sideload IPA

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - simulator

jobs:
  build-sideload-ipa:
    name: üì± Build Sideloadable IPA
    runs-on: macos-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
    
    - name: üîß Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0'
    
    - name: üõ†Ô∏è Install Tools
      run: |
        brew install xcodegen
        echo "‚úÖ Tools installed"
    
    - name: üì± Generate Project
      run: |
        xcodegen generate
        echo "‚úÖ Project generated"
    
    - name: üèóÔ∏è Build for Device (Unsigned)
      if: inputs.build_type == 'development'
      timeout-minutes: 15
      run: |
        echo "üöÄ Building unsigned IPA for sideloading..."
        
        # Clean any previous builds
        echo "üßπ Cleaning previous builds..."
        rm -rf ./DerivedData
        rm -rf SketchAI.xcodeproj
        
        # Regenerate project to ensure fresh state
        echo "üì± Regenerating Xcode project..."
        xcodegen generate
        
        # Kill any lingering simulator processes that could cause runtime conflicts
        echo "üîß Killing lingering simulator processes..."
        sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService 2>/dev/null || true
        
        # Completely disable simulator support in Xcode
        echo "üîß Disabling simulator support completely..."
        sudo xcrun simctl shutdown all 2>/dev/null || true
        sudo xcrun simctl erase all 2>/dev/null || true
        
        # Remove simulator runtimes to prevent conflicts
        echo "üîß Removing simulator runtimes..."
        sudo rm -rf /Library/Developer/CoreSimulator/Profiles/Runtimes/* 2>/dev/null || true
        
        # Apply asset catalog fixes for device-only build
        echo "üîß Applying asset catalog compilation fixes..."
        export ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO
        export ASSETCATALOG_COMPILER_OPTIMIZATION=space
        export ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO
        export ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO
        export ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon
        export ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME=AccentColor
        export ASSETCATALOG_COMPILER_SKIP_VALIDATION=NO
        # Force device-only platform
        export SUPPORTED_PLATFORMS=iphoneos
        export TARGETED_DEVICE_FAMILY=1,2
        # Force device-only compilation
        export ONLY_ACTIVE_ARCH=NO
        export VALIDATE_PRODUCT=NO
        export SKIP_INSTALL=NO
        
        # Verify project generation
        if [ ! -f "SketchAI.xcodeproj/project.pbxproj" ]; then
          echo "‚ùå Project generation failed"
          exit 1
        fi
        
        # Build without code signing with verbose output
        echo "üî® Starting build process..."
        xcodebuild clean \
          -project SketchAI.xcodeproj \
          -scheme SketchAI \
          -configuration Debug
        
        # Force device-only asset catalog compilation
        echo "üîß Forcing device-only asset catalog compilation..."
        export ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO
        export ASSETCATALOG_COMPILER_OPTIMIZATION=space
        export ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO
        export ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO
        export ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon
        export ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME=AccentColor
        export ASSETCATALOG_COMPILER_SKIP_VALIDATION=NO
        export SUPPORTED_PLATFORMS=iphoneos
        export TARGETED_DEVICE_FAMILY=1,2
        export ONLY_ACTIVE_ARCH=NO
        export VALIDATE_PRODUCT=NO
        export SKIP_INSTALL=NO
        
        xcodebuild build \
          -project SketchAI.xcodeproj \
          -scheme SketchAI \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -derivedDataPath ./DerivedData \
          -parallelizeTargets \
          -jobs 4 \
          SWIFT_COMPILATION_MODE=wholemodule \
          SWIFT_OPTIMIZATION_LEVEL=-Onone \
          GCC_OPTIMIZATION_LEVEL=0 \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE="" \
          ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
          ASSETCATALOG_COMPILER_OPTIMIZATION=space \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
          ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon \
          ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME=AccentColor \
          SUPPORTED_PLATFORMS="iphoneos" \
          VALID_ARCHS="arm64" \
          ARCHS="arm64" \
          TARGETED_DEVICE_FAMILY="1,2" \
          IPHONEOS_DEPLOYMENT_TARGET=16.0 \
          EXCLUDED_ARCHS[sdk=iphonesimulator*]="arm64" \
          ONLY_ACTIVE_ARCH=NO \
          VALIDATE_PRODUCT=NO \
          SKIP_INSTALL=NO \
          ASSETCATALOG_COMPILER_SKIP_VALIDATION=NO \
          ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon \
          ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME=AccentColor \
          TARGETED_DEVICE_FAMILY="1,2" \
          SUPPORTED_PLATFORMS="iphoneos" \
          ONLY_ACTIVE_ARCH=NO \
          VALIDATE_PRODUCT=NO \
          SKIP_INSTALL=NO \
          ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
          ASSETCATALOG_COMPILER_OPTIMIZATION=space \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
          ASSETCATALOG_COMPILER_SKIP_VALIDATION=NO \
          ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon \
          ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME=AccentColor \
          2>&1 | tee sideload_build_output.log
        
        # Analyze build output for errors
        echo "üìä Analyzing build output..."
        
        # Count errors and warnings
        TOTAL_ERRORS=$(grep -c "error:" sideload_build_output.log || echo "0")
        TOTAL_WARNINGS=$(grep -c "warning:" sideload_build_output.log || echo "0")
        
        echo ""
        echo "üìä BUILD STATISTICS:"
        echo "  Total Errors: $TOTAL_ERRORS"
        echo "  Total Warnings: $TOTAL_WARNINGS"
        
        # Show all errors if any
        if [ $TOTAL_ERRORS -gt 0 ]; then
          echo ""
          echo "üî¥ ALL COMPILATION ERRORS:"
          echo "=========================="
          grep -n "error:" sideload_build_output.log
          echo ""
          echo "‚ùå Build failed with $TOTAL_ERRORS errors"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully with no errors!"
    
    - name: üèóÔ∏è Build for Simulator  
      if: inputs.build_type == 'simulator'
      run: |
        echo "üöÄ Building for iOS Simulator..."
        
        xcodebuild \
          -project SketchAI.xcodeproj \
          -scheme SketchAI \
          -configuration Debug \
          -destination 'generic/platform=iOS Simulator' \
          -derivedDataPath ./DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          build
        
        echo "‚úÖ Simulator build completed"
    
    - name: üì¶ Create IPA Package
      if: inputs.build_type == 'development'
      run: |
        echo "üì¶ Creating IPA file..."
        
        # Find the built .app file
        APP_PATH=$(find ./DerivedData -name "SketchAI.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "‚ùå SketchAI.app not found!"
          find ./DerivedData -name "*.app" -type d
          exit 1
        fi
        
        echo "Found app at: $APP_PATH"
        
        # Create IPA structure
        mkdir -p Payload
        cp -R "$APP_PATH" Payload/SketchAI.app
        
        # Create IPA file
        zip -r SketchAI-Sideload.ipa Payload/
        
        # Verify IPA
        if [ -f "SketchAI-Sideload.ipa" ]; then
          echo "‚úÖ IPA created successfully!"
          echo "File size: $(ls -lh SketchAI-Sideload.ipa | awk '{print $5}')"
        else
          echo "‚ùå IPA creation failed!"
          exit 1
        fi
    
    - name: üì¶ Package Simulator App
      if: inputs.build_type == 'simulator'
      run: |
        echo "üì¶ Packaging Simulator app..."
        
        APP_PATH=$(find ./DerivedData -name "SketchAI.app" -type d | head -1)
        
        if [ -n "$APP_PATH" ]; then
          zip -r SketchAI-Simulator.zip "$APP_PATH"
          echo "‚úÖ Simulator app packaged"
        fi
    
    - name: üì§ Upload IPA
      if: inputs.build_type == 'development'
      uses: actions/upload-artifact@v4
      with:
        name: SketchAI-Sideload-IPA
        path: SketchAI-Sideload.ipa
        retention-days: 30
    
    - name: üì§ Upload Simulator App
      if: inputs.build_type == 'simulator'
      uses: actions/upload-artifact@v4
      with:
        name: SketchAI-Simulator-App
        path: SketchAI-Simulator.zip
        retention-days: 30
    
    - name: üìã Download Instructions
      run: |
        echo ""
        echo "üéâ BUILD COMPLETED SUCCESSFULLY!"
        echo "================================="
        echo ""
        
        if [ "${{ inputs.build_type }}" == "development" ]; then
          echo "üì± DEVICE INSTALLATION (Sideloading):"
          echo "-------------------------------------"
          echo "1. üì• Go to this workflow's summary page"
          echo "2. üìÇ Download 'SketchAI-Sideload-IPA' from Artifacts"
          echo "3. üì± Install using one of these methods:"
          echo ""
          echo "   üü¢ AltStore (Easiest - Free):"
          echo "   ‚Ä¢ Install AltStore on your device: altstore.io"
          echo "   ‚Ä¢ Open AltStore ‚Üí '+' ‚Üí Browse ‚Üí Select IPA"
          echo ""
          echo "   üü¢ Sideloadly (Free with watermark):"
          echo "   ‚Ä¢ Download Sideloadly: sideloadly.io"
          echo "   ‚Ä¢ Connect device ‚Üí drag IPA to install"
          echo ""
          echo "   üü¢ TrollStore (iOS 14.0-16.6.1):"
          echo "   ‚Ä¢ If you have TrollStore, directly install IPA"
          echo ""
          echo "   üîµ Xcode (Mac required):"
          echo "   ‚Ä¢ Xcode ‚Üí Window ‚Üí Devices ‚Üí Drag IPA"
          echo ""
        else
          echo "üñ•Ô∏è SIMULATOR INSTALLATION:"
          echo "-------------------------"
          echo "1. üì• Download 'SketchAI-Simulator-App' from Artifacts"
          echo "2. üìÇ Extract the ZIP file"
          echo "3. üñ•Ô∏è Drag SketchAI.app to iOS Simulator"
          echo ""
        fi
        
        echo "‚ö†Ô∏è  IMPORTANT NOTES:"
        echo "‚Ä¢ This is an unsigned build for testing only"
        echo "‚Ä¢ You may need to trust the developer certificate"
        echo "‚Ä¢ App will expire after 7 days (re-install if needed)"
        echo ""
        echo "üîß TROUBLESHOOTING:"
        echo "‚Ä¢ If app won't open: Settings ‚Üí General ‚Üí VPN & Device Management ‚Üí Trust"
        echo "‚Ä¢ If installation fails: Try different sideloading tool"
        echo ""
        echo "üé® Ready to test your SketchAI drawing app! üé®"
