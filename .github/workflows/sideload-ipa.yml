name: 🚀 Build Sideload IPA

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - simulator

jobs:
  build-sideload-ipa:
    name: 📱 Build Sideloadable IPA
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0'
    
    - name: 🛠️ Install Tools
      run: |
        brew install xcodegen
        echo "✅ Tools installed"
    
    - name: 📱 Generate Project
      run: |
        xcodegen generate
        echo "✅ Project generated"
    
    - name: 🏗️ Build for Device (Unsigned)
      if: inputs.build_type == 'development'
      timeout-minutes: 15
      run: |
        echo "🚀 Building unsigned IPA for sideloading..."
        
        # Clean any previous builds
        echo "🧹 Cleaning previous builds..."
        rm -rf ./DerivedData
        rm -rf SketchAI.xcodeproj
        
        # Regenerate project to ensure fresh state
        echo "📱 Regenerating Xcode project..."
        xcodegen generate
        
        # Apply asset catalog fixes
        echo "🔧 Applying asset catalog compilation fixes..."
        export ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO
        export ASSETCATALOG_COMPILER_OPTIMIZATION=space
        export ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO
        export ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO
        
        # Verify project generation
        if [ ! -f "SketchAI.xcodeproj/project.pbxproj" ]; then
          echo "❌ Project generation failed"
          exit 1
        fi
        
        # Build without code signing with verbose output
        echo "🔨 Starting build process..."
        xcodebuild clean \
          -project SketchAI.xcodeproj \
          -scheme SketchAI \
          -configuration Debug
        
        xcodebuild build \
          -project SketchAI.xcodeproj \
          -scheme SketchAI \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -derivedDataPath ./DerivedData \
          -parallelizeTargets \
          -jobs 4 \
          SWIFT_COMPILATION_MODE=wholemodule \
          SWIFT_OPTIMIZATION_LEVEL=-Onone \
          GCC_OPTIMIZATION_LEVEL=0 \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE="" \
          ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=NO \
          ASSETCATALOG_COMPILER_OPTIMIZATION=space \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
          ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOLS=NO \
          SUPPORTED_PLATFORMS="iphoneos" \
          VALID_ARCHS="arm64" \
          ARCHS="arm64" \
          2>&1 | tee sideload_build_output.log
        
        # Analyze build output for errors
        echo "📊 Analyzing build output..."
        
        # Count errors and warnings
        TOTAL_ERRORS=$(grep -c "error:" sideload_build_output.log || echo "0")
        TOTAL_WARNINGS=$(grep -c "warning:" sideload_build_output.log || echo "0")
        
        echo ""
        echo "📊 BUILD STATISTICS:"
        echo "  Total Errors: $TOTAL_ERRORS"
        echo "  Total Warnings: $TOTAL_WARNINGS"
        
        # Show all errors if any
        if [ $TOTAL_ERRORS -gt 0 ]; then
          echo ""
          echo "🔴 ALL COMPILATION ERRORS:"
          echo "=========================="
          grep -n "error:" sideload_build_output.log
          echo ""
          echo "❌ Build failed with $TOTAL_ERRORS errors"
          exit 1
        fi
        
        echo "✅ Build completed successfully with no errors!"
    
    - name: 🏗️ Build for Simulator  
      if: inputs.build_type == 'simulator'
      run: |
        echo "🚀 Building for iOS Simulator..."
        
        xcodebuild \
          -project SketchAI.xcodeproj \
          -scheme SketchAI \
          -configuration Debug \
          -destination 'generic/platform=iOS Simulator' \
          -derivedDataPath ./DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          build
        
        echo "✅ Simulator build completed"
    
    - name: 📦 Create IPA Package
      if: inputs.build_type == 'development'
      run: |
        echo "📦 Creating IPA file..."
        
        # Find the built .app file
        APP_PATH=$(find ./DerivedData -name "SketchAI.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "❌ SketchAI.app not found!"
          find ./DerivedData -name "*.app" -type d
          exit 1
        fi
        
        echo "Found app at: $APP_PATH"
        
        # Create IPA structure
        mkdir -p Payload
        cp -R "$APP_PATH" Payload/SketchAI.app
        
        # Create IPA file
        zip -r SketchAI-Sideload.ipa Payload/
        
        # Verify IPA
        if [ -f "SketchAI-Sideload.ipa" ]; then
          echo "✅ IPA created successfully!"
          echo "File size: $(ls -lh SketchAI-Sideload.ipa | awk '{print $5}')"
        else
          echo "❌ IPA creation failed!"
          exit 1
        fi
    
    - name: 📦 Package Simulator App
      if: inputs.build_type == 'simulator'
      run: |
        echo "📦 Packaging Simulator app..."
        
        APP_PATH=$(find ./DerivedData -name "SketchAI.app" -type d | head -1)
        
        if [ -n "$APP_PATH" ]; then
          zip -r SketchAI-Simulator.zip "$APP_PATH"
          echo "✅ Simulator app packaged"
        fi
    
    - name: 📤 Upload IPA
      if: inputs.build_type == 'development'
      uses: actions/upload-artifact@v4
      with:
        name: SketchAI-Sideload-IPA
        path: SketchAI-Sideload.ipa
        retention-days: 30
    
    - name: 📤 Upload Simulator App
      if: inputs.build_type == 'simulator'
      uses: actions/upload-artifact@v4
      with:
        name: SketchAI-Simulator-App
        path: SketchAI-Simulator.zip
        retention-days: 30
    
    - name: 📋 Download Instructions
      run: |
        echo ""
        echo "🎉 BUILD COMPLETED SUCCESSFULLY!"
        echo "================================="
        echo ""
        
        if [ "${{ inputs.build_type }}" == "development" ]; then
          echo "📱 DEVICE INSTALLATION (Sideloading):"
          echo "-------------------------------------"
          echo "1. 📥 Go to this workflow's summary page"
          echo "2. 📂 Download 'SketchAI-Sideload-IPA' from Artifacts"
          echo "3. 📱 Install using one of these methods:"
          echo ""
          echo "   🟢 AltStore (Easiest - Free):"
          echo "   • Install AltStore on your device: altstore.io"
          echo "   • Open AltStore → '+' → Browse → Select IPA"
          echo ""
          echo "   🟢 Sideloadly (Free with watermark):"
          echo "   • Download Sideloadly: sideloadly.io"
          echo "   • Connect device → drag IPA to install"
          echo ""
          echo "   🟢 TrollStore (iOS 14.0-16.6.1):"
          echo "   • If you have TrollStore, directly install IPA"
          echo ""
          echo "   🔵 Xcode (Mac required):"
          echo "   • Xcode → Window → Devices → Drag IPA"
          echo ""
        else
          echo "🖥️ SIMULATOR INSTALLATION:"
          echo "-------------------------"
          echo "1. 📥 Download 'SketchAI-Simulator-App' from Artifacts"
          echo "2. 📂 Extract the ZIP file"
          echo "3. 🖥️ Drag SketchAI.app to iOS Simulator"
          echo ""
        fi
        
        echo "⚠️  IMPORTANT NOTES:"
        echo "• This is an unsigned build for testing only"
        echo "• You may need to trust the developer certificate"
        echo "• App will expire after 7 days (re-install if needed)"
        echo ""
        echo "🔧 TROUBLESHOOTING:"
        echo "• If app won't open: Settings → General → VPN & Device Management → Trust"
        echo "• If installation fails: Try different sideloading tool"
        echo ""
        echo "🎨 Ready to test your SketchAI drawing app! 🎨"
